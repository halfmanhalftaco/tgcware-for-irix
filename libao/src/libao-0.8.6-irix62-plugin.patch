diff -x Makefile.in -urN libao-0.8.6/configure.in libao-0.8.6.hacked//configure.in
--- libao-0.8.6/configure.in	Tue Jan 11 22:37:15 2005
+++ libao-0.8.6.hacked//configure.in	Sun Feb 20 12:20:10 2005
@@ -299,10 +299,12 @@
 
 case $host in
         *-*-irix*)
-                AC_CHECK_LIB(audio, ALwritesamps, have_irix=yes, have_irix=no)
+                AC_CHECK_LIB(audio, ALwritesamps, have_irixold=yes, have_irixold=no)
+                AC_CHECK_LIB(audio, alWriteFrames, have_irix=yes, have_irix=no)
         ;;
 esac
 AM_CONDITIONAL(HAVE_IRIX,test "x$have_irix" = xyes)
+AM_CONDITIONAL(HAVE_IRIXOLD,test "x$have_irixold" = xyes)
 
 
 dnl Check for MacOS X
@@ -366,4 +368,4 @@
 AC_SUBST(PLUGIN_LDFLAGS)
 
 
-AC_OUTPUT(Makefile src/Makefile doc/Makefile include/Makefile include/ao/Makefile include/ao/os_types.h src/plugins/Makefile src/plugins/esd/Makefile src/plugins/oss/Makefile src/plugins/alsa/Makefile src/plugins/alsa09/Makefile src/plugins/sun/Makefile src/plugins/irix/Makefile src/plugins/arts/Makefile src/plugins/macosx/Makefile src/plugins/nas/Makefile src/plugins/polyp/Makefile debian/Makefile ao.pc)
+AC_OUTPUT(Makefile src/Makefile doc/Makefile include/Makefile include/ao/Makefile include/ao/os_types.h src/plugins/Makefile src/plugins/esd/Makefile src/plugins/oss/Makefile src/plugins/alsa/Makefile src/plugins/alsa09/Makefile src/plugins/sun/Makefile src/plugins/irix/Makefile src/plugins/irixold/Makefile src/plugins/arts/Makefile src/plugins/macosx/Makefile src/plugins/nas/Makefile src/plugins/polyp/Makefile debian/Makefile ao.pc)
diff -x Makefile.in -urN libao-0.8.6/src/plugins/Makefile.am libao-0.8.6.hacked//src/plugins/Makefile.am
--- libao-0.8.6/src/plugins/Makefile.am	Tue Nov  9 09:20:26 2004
+++ libao-0.8.6.hacked//src/plugins/Makefile.am	Sun Feb 20 12:02:09 2005
@@ -1,4 +1,4 @@
 ## Process this file with automake to produce Makefile.in
 
 AUTOMAKE_OPTIONS = foreign
-SUBDIRS = oss esd arts alsa alsa09 sun irix macosx nas polyp
+SUBDIRS = oss esd arts alsa alsa09 sun irix macosx nas polyp irixold
diff -x Makefile.in -urN libao-0.8.6/src/plugins/irixold/Makefile.am libao-0.8.6.hacked//src/plugins/irixold/Makefile.am
--- libao-0.8.6/src/plugins/irixold/Makefile.am
+++ libao-0.8.6.hacked//src/plugins/irixold/Makefile.am	Sun Feb 20 12:26:08 2005
@@ -0,0 +1,26 @@
+## Process this file with automake to produce Makefile.in
+
+AUTOMAKE_OPTIONS = foreign
+
+if HAVE_IRIXOLD
+
+irixoldltlibs = libirixold.la
+irixoldsources = ao_irixold.c
+
+else
+
+irixoldltlibs =
+irixoldsources =
+
+endif
+
+INCLUDES = -I$(top_builddir)/include/ao -I$(top_srcdir)/include
+
+libdir = $(plugindir)
+lib_LTLIBRARIES = $(irixoldltlibs)
+
+libirixold_la_LDFLAGS = @PLUGIN_LDFLAGS@
+libirixold_la_LIBADD = -laudio
+libirixold_la_SOURCES = $(irixoldsources)
+
+EXTRA_DIST = ao_irixold.c
diff -x Makefile.in -urN libao-0.8.6/src/plugins/irixold/ao_irixold.c libao-0.8.6.hacked//src/plugins/irixold/ao_irixold.c
--- libao-0.8.6/src/plugins/irixold/ao_irixold.c
+++ libao-0.8.6.hacked//src/plugins/irixold/ao_irixold.c	Sun Feb 20 20:18:43 2005
@@ -0,0 +1,223 @@
+/*
+ *
+ *  ao_irixold.h
+ *
+ *      This is the Irix 6.5.x audio plugin ported to the old-style
+ *      audio API from IRIX 6.2,5.3 by Tom G. Christensen - Feb 2005
+ *	
+ *      Irix 6.5 plugin notes:
+ *      Original Copyright (C) Aaron Holtzman - May 1999
+ *      Port to IRIX by Jim Miller, SGI - Nov 1999
+ *      Modifications Copyright (C) Stan Seibert - July 2000, July 2001
+ *
+ *  This file is part of libao, a cross-platform library.  See
+ *  README for a history of this source code.
+ *
+ *  libao is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  libao is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GNU Make; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <stdio.h>
+#include <errno.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <math.h>
+
+#include <audio.h>
+
+#include <ao/ao.h>
+
+#define AO_IRIX_BUFFER_SIZE 32768
+
+typedef struct ao_irix_internal {
+	ALport alport;
+	ALconfig alconfig;
+	int bytesPerSample;
+	int channels;
+} ao_irix_internal;
+
+
+static ao_info ao_irix_info =
+{
+	AO_TYPE_LIVE,
+	"Irix old-style audio output ",
+	"irixold",
+	"Tom G. Christensen <libao@jupiterrise.com>",
+	"Outputs to the IRIX old-style Audio Library.",
+	AO_FMT_NATIVE,
+	20,
+	NULL,
+	1
+};
+
+int ao_plugin_test(void)
+{
+	char *dev_path;
+	ALport port;
+
+
+	if ((port = ALopenport("libao test", "w", NULL)) == NULL)
+		return 0; /* Cannot use this plugin with default parameters */
+	else {
+		ALcloseport(port);
+		return 1; /* This plugin works in default mode */
+	}
+}
+
+ao_info *ao_plugin_driver_info(void)
+{
+	return &ao_irix_info;
+}
+
+
+int ao_plugin_device_init(ao_device *device)
+{
+	ao_irix_internal *internal;
+
+	internal = (ao_irix_internal *) malloc(sizeof(ao_irix_internal));
+
+	if (internal == NULL)
+		/* Could not allocate memory for device-specific data. */
+		return 0;
+
+	internal->alconfig = ALnewconfig();
+	internal->alport = NULL;
+	internal->bytesPerSample = 2;
+	internal->channels = 2;
+
+	device->internal = internal;
+
+	/* Device-specific initialization was successful. */
+	return 1;
+}
+
+int ao_plugin_set_option(ao_device *device, const char *key, const char *value)
+{
+	return 1; /* No options */
+}
+
+/* Open the audio device for writing. */
+int ao_plugin_open(ao_device *device, ao_sample_format *format)
+{
+	ao_irix_internal *internal = (ao_irix_internal *) device->internal;
+	long params[2];
+	int  dev = AL_DEFAULT_DEVICE;
+	int  wsize = AL_SAMPLE_16;
+
+	if (ALsetqueuesize(internal->alconfig, AO_IRIX_BUFFER_SIZE) < 0) {
+		fprintf(stderr, "ALsetqueuesize failed: %d\n",
+			oserror());
+		return 0;
+	}
+
+	if (ALsetchannels(internal->alconfig, format->channels) < 0) {
+		fprintf(stderr, "ALsetchannels(%d) failed: %d\n",
+			format->channels, oserror());
+		return 0;
+	}
+
+	internal->channels = format->channels;
+
+	if (ALsetsampfmt(internal->alconfig, AL_SAMPFMT_TWOSCOMP) < 0) {
+		fprintf(stderr, "ALsetsampfmt failed: %d\n",
+			oserror());
+		return 0;
+	}
+
+	switch (format->bits) {
+	case 8:
+		internal->bytesPerSample = 1;
+		wsize = AL_SAMPLE_8;
+		break;
+
+	case 16:
+		internal->bytesPerSample = 2;
+		wsize = AL_SAMPLE_16;
+		break;
+
+	case 24:
+		internal->bytesPerSample = 4;
+		wsize = AL_SAMPLE_24;
+		break;
+
+	default:
+		fprintf(stderr, "Irix audio: unsupported bit with %d\n",
+			format->bits);
+		break;
+	}
+
+	if (ALsetwidth(internal->alconfig, wsize) < 0) {
+		fprintf(stderr, "ALsetwidth failed: %d\n",
+			oserror());
+		ALcloseport(internal->alport);
+		return 0;
+	}
+
+	internal->alport = ALopenport("libao", "w", internal->alconfig);
+	if (internal->alport == NULL)
+	{
+		fprintf(stderr, "ALopenport failed: %d\n",
+			oserror());
+		return 0;
+	}
+
+	params[0] = AL_OUTPUT_RATE;
+	/* FIXME: Irix old-style AL doesn't have alDoubleToFixed rate chooser */
+	params[1] = format->rate;
+
+	if (ALsetparams(dev, params, 2) < 0)
+	{
+		printf("ALsetparams() failed: %d\n", oserror());
+		ALcloseport(internal->alport);
+		return 0;
+	}
+
+	device->driver_byte_format = AO_FMT_NATIVE;
+
+	return 1;
+}
+
+/* Play the sampled audio data to the already opened device. */
+int ao_plugin_play(ao_device *device, const char *output_samples,
+		uint_32 num_bytes)
+{
+	uint_32 num_frames;
+	ao_irix_internal *internal = (ao_irix_internal *) device->internal;
+
+	num_frames = num_bytes;
+	num_frames /= internal->bytesPerSample;
+
+	ALwritesamps(internal->alport, (void*) output_samples, num_frames);
+
+	return 1; /* FIXME: Need to check if the above function failed */
+}
+
+int ao_plugin_close(ao_device *device)
+{
+	ao_irix_internal *internal = (ao_irix_internal *) device->internal;
+
+	ALcloseport(internal->alport);
+
+	return 1;
+}
+
+void ao_plugin_device_clear(ao_device *device)
+{
+	ao_irix_internal *internal = (ao_irix_internal *) device->internal;
+
+	ALfreeconfig(internal->alconfig);
+	free(internal);
+}
