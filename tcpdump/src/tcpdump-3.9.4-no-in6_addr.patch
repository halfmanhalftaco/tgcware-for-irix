===================================================================
RCS file: /tcpdump/master/tcpdump/print-isoclns.c,v
retrieving revision 1.133.2.19
retrieving revision 1.133.2.20
diff -u -r1.133.2.19 -r1.133.2.20
--- tcpdump/print-isoclns.c	2005/09/20 10:15:22	1.133.2.19
+++ tcpdump/print-isoclns.c	2005/10/16 08:18:18	1.133.2.20
@@ -26,7 +26,7 @@
 
 #ifndef lint
 static const char rcsid[] _U_ =
-    "@(#) $Header: /home/tgc/cvs2svn/athenacvs.root/buildpkg/tcpdump/src/tcpdump-3.9.4-no-in6_addr.patch,v 1.1 2006/06/24 13:15:03 tgc Exp $ (LBL)";
+    "@(#) $Header: /home/tgc/cvs2svn/athenacvs.root/buildpkg/tcpdump/src/tcpdump-3.9.4-no-in6_addr.patch,v 1.1 2006/06/24 13:15:03 tgc Exp $ (LBL)";
 #endif
 
 #ifdef HAVE_CONFIG_H
@@ -1616,7 +1616,11 @@
 isis_print_extd_ip_reach (const u_int8_t *tptr, const char *ident, u_int16_t afi) {
 
     char ident_buffer[20];
+#ifdef INET6
     u_int8_t prefix[sizeof(struct in6_addr)]; /* shared copy buffer for IPv4 and IPv6 prefixes */
+#else
+    u_int8_t prefix[sizeof(struct in_addr)]; /* shared copy buffer for IPv4 prefixes */
+#endif
     u_int metric, status_byte, bit_length, byte_length, sublen, processed, subtlvtype, subtlvlen;
 
     if (!TTEST2(*tptr, 4))
@@ -1630,6 +1634,12 @@
             return (0);
         status_byte=*(tptr++);
         bit_length = status_byte&0x3f;
+        if (bit_length > 32) {
+            printf("%sIPv4 prefix: bad bit length %u",
+                   ident,
+                   bit_length);
+            return (0);
+        }
         processed++;
 #ifdef INET6
     } else if (afi == IPV6) {
@@ -1637,6 +1647,12 @@
             return (0);
         status_byte=*(tptr++);
         bit_length=*(tptr++);
+        if (bit_length > 128) {
+            printf("%sIPv6 prefix: bad bit length %u",
+                   ident,
+                   bit_length);
+            return (0);
+        }
         processed+=2;
 #endif
     } else
@@ -1646,7 +1662,11 @@
    
     if (!TTEST2(*tptr, byte_length))
         return (0);
+#ifdef INET6
     memset(prefix, 0, sizeof(struct in6_addr));              /* clear the copy buffer */
+#else
+    memset(prefix, 0, sizeof(struct in_addr));               /* clear the copy buffer */
+#endif
     memcpy(prefix,tptr,byte_length);    /* copy as much as is stored in the TLV */
     tptr+=byte_length;
     processed+=byte_length;
