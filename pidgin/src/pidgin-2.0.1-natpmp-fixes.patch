--- pidgin-2.0.1/libpurple/nat-pmp.c.natpmp	2007-06-10 13:58:14.311200000 +0200
+++ pidgin-2.0.1/libpurple/nat-pmp.c	2007-06-10 13:58:27.241200000 +0200
@@ -124,7 +124,7 @@
 		if (bitmask & (1 << i)) 
 		{
 			addrs[i] = sa;
-			sa = (struct sockaddr *)(ROUNDUP(sa->sa_len) + (char *)sa);
+			sa = (struct sockaddr *)(ROUNDUP(sizeof(struct sockaddr_in)) + (char *)sa);
 		} 
 		else
 		{
@@ -142,10 +142,7 @@
 		return 0;
 
     sin = (struct sockaddr_in *)sa;
-    if ((sin->sin_addr.s_addr == INADDR_ANY) &&
-		mask &&
-		(ntohl(((struct sockaddr_in *)mask)->sin_addr.s_addr) == 0L ||
-		 mask->sa_len == 0))
+    if ((sin->sin_addr.s_addr == INADDR_ANY) && mask && ntohl(((struct sockaddr_in *)mask)->sin_addr.s_addr) == 0L)
 		return 1;
     else
 		return 0;
@@ -206,20 +203,20 @@
 			if ((rtm->rtm_flags & RTF_GATEWAY) && sin->sin_addr.s_addr == INADDR_ANY)
 			{
 				/* We found the default route. Now get the destination address and netmask. */
-	            struct sockaddr *rti_info[RTAX_MAX];
+				struct sockaddr *rti_info[RTAX_MAX];
 				struct sockaddr addr, mask;
 
 				get_rtaddrs(rtm->rtm_addrs, sa, rti_info);
 				bzero(&addr, sizeof(addr));
 
-				if (rtm->rtm_addrs & RTA_DST)
+/*				if (rtm->rtm_addrs & RTA_DST)
 					bcopy(rti_info[RTAX_DST], &addr, rti_info[RTAX_DST]->sa_len);
-
+*/
 				bzero(&mask, sizeof(mask));
 
-				if (rtm->rtm_addrs & RTA_NETMASK)
-					bcopy(rti_info[RTAX_NETMASK], &mask, rti_info[RTAX_NETMASK]->sa_len);
-
+/*				if (rtm->rtm_addrs & RTA_NETMASK)
+					bcopy(rti_info[RTAX_NETMASK], &mask, rti_info[RTAX_NETMASK]->salen);
+*/
 				if (rtm->rtm_addrs & RTA_GATEWAY &&
 					is_default_route(&addr, &mask)) 
 				{					
--- pidgin-2.0.1/libpurple/nat-pmp.h.natpmp	2007-06-10 13:58:14.311200000 +0200
+++ pidgin-2.0.1/libpurple/nat-pmp.h	2007-06-10 14:00:08.311200000 +0200
@@ -31,6 +31,11 @@
 #ifndef _PURPLE_NAT_PMP_H
 #define _PURPLE_NAT_PMP_H
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <bstring.h>
 #include <glib.h>
 
 #define PURPLE_PMP_LIFETIME	3600	/* 3600 seconds */
