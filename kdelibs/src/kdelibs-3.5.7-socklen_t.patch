--- kdelibs-3.5.7/kioslave/ftp/ftp.h.socklen_t	2007-05-28 22:39:43.499600000 +0200
+++ kdelibs-3.5.7/kioslave/ftp/ftp.h	2007-05-28 22:39:57.799600000 +0200
@@ -196,7 +196,7 @@
 /**
   * utility to simplify calls to ::setsockopt(). Uses sock().
   */
-  bool    setSocketOption(int opt, char*arg, socklen_t len) const;
+  bool    setSocketOption(int opt, char*arg, kde_socklen_t len) const;
 
 /**
   * utility to read data from the effective socket, see sock()
--- kdelibs-3.5.7/kioslave/ftp/ftp.cc.socklen_t	2007-05-28 22:26:44.429600000 +0200
+++ kdelibs-3.5.7/kioslave/ftp/ftp.cc	2007-05-28 22:26:56.099600000 +0200
@@ -287,7 +287,7 @@
   textClear();
 }
 
-bool FtpSocket::setSocketOption(int opt, char*arg, socklen_t len) const
+bool FtpSocket::setSocketOption(int opt, char*arg, kde_socklen_t len) const
 {
   return (setsockopt(sock(), SOL_SOCKET, opt, arg, len) != -1);
 }
--- kdelibs-3.5.7/dnssd/publicservice.cpp.socklen_t	2007-05-28 17:33:08.321600000 +0200
+++ kdelibs-3.5.7/dnssd/publicservice.cpp	2007-05-28 17:33:19.881600000 +0200
@@ -212,7 +212,7 @@
 static unsigned long publicIP()
 {
 	struct sockaddr_in addr;
-	socklen_t len = sizeof(addr);
+	kde_socklen_t len = sizeof(addr);
 	int sock = socket(AF_INET,SOCK_DGRAM,0);
 	if (sock == -1) return 0;
 	addr.sin_family = AF_INET;
--- kdelibs-3.5.7/kdecore/ksocks.cpp.socklen_t	2005-10-10 17:06:03.000000000 +0200
+++ kdelibs-3.5.7/kdecore/ksocks.cpp	2007-05-28 16:53:38.667600000 +0200
@@ -39,6 +39,8 @@
 
 #include "ksocks.h"
 
+typedef int socklen_t;
+
 // DO NOT RE-ORDER THESE.
 enum SymbolKeys {
       S_SOCKSinit    =  0,
--- kdelibs-3.5.7/kdecore/network/ksocketdevice.cpp.socklen_t	2007-01-15 12:34:17.000000000 +0100
+++ kdelibs-3.5.7/kdecore/network/ksocketdevice.cpp	2007-05-28 16:53:38.677600000 +0200
@@ -316,7 +316,7 @@
     }
 
   struct sockaddr sa;
-  socklen_t len = sizeof(sa);
+  kde_socklen_t len = sizeof(sa);
   int newfd = kde_accept(m_sockfd, &sa, &len);
   if (newfd == -1)
     {
@@ -390,7 +390,7 @@
 
 static int do_read_common(int sockfd, char *data, Q_ULONG maxlen, KSocketAddress* from, ssize_t &retval, bool peek = false)
 {
-  socklen_t len;
+  kde_socklen_t len;
   if (from)
     {
       from->setLength(len = 128); // arbitrary length
@@ -535,7 +535,7 @@
   if (d->local.family() != AF_UNSPEC)
     return d->local;
 
-  socklen_t len;
+  kde_socklen_t len;
   KSocketAddress localAddress;
   localAddress.setLength(len = 32);	// arbitrary value
   if (kde_getsockname(m_sockfd, localAddress.address(), &len) == -1)
@@ -571,7 +571,7 @@
   if (d->peer.family() != AF_UNSPEC)
     return d->peer;
 
-  socklen_t len;
+  kde_socklen_t len;
   KSocketAddress peerAddress;
   peerAddress.setLength(len = 32);	// arbitrary value
   if (kde_getpeername(m_sockfd, peerAddress.address(), &len) == -1)
--- kdelibs-3.5.7/kdecore/network/syssocket.h.socklen_t	2005-09-10 10:27:10.000000000 +0200
+++ kdelibs-3.5.7/kdecore/network/syssocket.h	2007-05-28 16:53:38.677600000 +0200
@@ -32,6 +32,8 @@
 #include <sys/types.h>
 #include <sys/socket.h>
 
+typedef int socklen_t;
+
 namespace {
 
   /*
--- kdelibs-3.5.7/kdecore/network/ksockssocketdevice.cpp.socklen_t	2005-10-10 17:06:02.000000000 +0200
+++ kdelibs-3.5.7/kdecore/network/ksockssocketdevice.cpp	2007-05-28 16:53:38.687600000 +0200
@@ -27,10 +27,8 @@
 #include <unistd.h>
 #endif
 
-#ifdef __CYGWIN__
 #undef kde_socklen_t 
 #define kde_socklen_t ksocklen_t 
-#endif 
 
 #include "kapplication.h"
 
--- kdelibs-3.5.7/kdecore/netsupp.cpp.socklen_t	2006-05-22 20:14:19.000000000 +0200
+++ kdelibs-3.5.7/kdecore/netsupp.cpp	2007-05-28 16:53:38.697600000 +0200
@@ -81,6 +81,8 @@
 #define KRF_CAN_RESOLVE_IPV4		0x200	/* if present, the resolver can resolve to IPv4 */
 #define KRF_CAN_RESOLVE_IPV6		0x400	/* if present, the resolver can resolve to IPv6 */
 
+typedef unsigned ksocklen_t;
+
 
 static void dofreeaddrinfo(struct addrinfo *ai)
 {
--- kdelibs-3.5.7/kdecore/kextsock.cpp.socklen_t	2007-05-28 16:52:20.697600000 +0200
+++ kdelibs-3.5.7/kdecore/kextsock.cpp	2007-05-28 16:53:38.707600000 +0200
@@ -542,7 +542,7 @@
     return d->addressReusable;
 
   int on;
-  socklen_t onsiz = sizeof(on);
+  kde_socklen_t onsiz = sizeof(on);
   if (getsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (char*)&on, &onsiz) == -1)
     {
       setError(IO_UnspecifiedError, errno);
@@ -596,7 +596,7 @@
     return d->ipv6only;
 
   int on;
-  socklen_t onsiz = sizeof(on);
+  kde_socklen_t onsiz = sizeof(on);
   if (getsockopt(sockfd, IPPROTO_IPV6, IPV6_V6ONLY,
 		 (char *)&on, &onsiz) == -1)
     {
@@ -1130,7 +1130,7 @@
 
 	      // this means that an event occurred in the socket
 	      int errcode;
-	      socklen_t len = sizeof(errcode);
+	      kde_socklen_t len = sizeof(errcode);
 	      retval = getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (char*)&errcode,
 				  &len);
 	      if (retval == -1 || errcode != 0)
@@ -1792,7 +1792,7 @@
       // our socket has activity
       // find out what it was
       int retval;
-      socklen_t len = sizeof(errcode);
+      kde_socklen_t len = sizeof(errcode);
       retval = getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (char*)&errcode, &len);
 
       if (retval == -1 || errcode != 0)
--- kdelibs-3.5.7/kdesu/client.cpp.socklen_t	2007-05-28 17:31:12.011600000 +0200
+++ kdelibs-3.5.7/kdesu/client.cpp	2007-05-28 17:31:24.331600000 +0200
@@ -43,7 +43,7 @@
 };
 
 #ifndef SUN_LEN
-#define SUN_LEN(ptr) ((socklen_t) (((struct sockaddr_un *) 0)->sun_path) \
+#define SUN_LEN(ptr) ((kde_socklen_t) (((struct sockaddr_un *) 0)->sun_path) \
 	             + strlen ((ptr)->sun_path))
 #endif
 
@@ -148,7 +148,7 @@
 # endif
 #else
     struct ucred cred;
-    socklen_t siz = sizeof(cred);
+    kde_socklen_t siz = sizeof(cred);
 
     // Security: if socket exists, we must own it
     if (getsockopt(sockfd, SOL_SOCKET, SO_PEERCRED, &cred, &siz) == 0)
