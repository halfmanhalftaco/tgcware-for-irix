--- kdelibs-3.4.0/kdecore/kextsock.h.ksocklen_t	2005-03-26 16:39:55.287808496 +0100
+++ kdelibs-3.4.0/kdecore/kextsock.h	2005-03-26 16:40:10.278709783 +0100
@@ -930,7 +930,7 @@
    * @param flags	the same flags as getnameinfo()
    * @returns 0 on success, nonzero otherwise.
    */
-  static int resolve(sockaddr* sock, ksocklen_t len, QString& host, QString& port, int flags = 0) KDE_DEPRECATED;
+  static int resolve(sockaddr* sock, kde_socklen_t len, QString& host, QString& port, int flags = 0) KDE_DEPRECATED;
 
   /**
    * Performs resolution on the given socket address.
--- kdelibs-3.4.0/kdecore/kextsock.cpp.ksocklen_t	2005-03-26 16:42:37.676906675 +0100
+++ kdelibs-3.4.0/kdecore/kextsock.cpp	2005-03-26 16:42:15.347543239 +0100
@@ -913,7 +913,7 @@
   // mode
   bool block = blockingMode();
   struct sockaddr sa;
-  ksocklen_t len = sizeof(sa);
+  kde_socklen_t len = sizeof(sa);
   sock = NULL;
 
   if (d->timeout.tv_sec > 0 || d->timeout.tv_usec > 0)
@@ -1960,7 +1960,7 @@
     startAsyncConnect();
 }
 
-int KExtendedSocket::resolve(sockaddr *sock, ksocklen_t len, QString &host,
+int KExtendedSocket::resolve(sockaddr *sock, kde_socklen_t len, QString &host,
 			     QString &port, int flags)
 {
   kdDebug(170) << "Deprecated function called:" << k_funcinfo << endl;
@@ -2048,7 +2048,7 @@
 {
   ::KSocketAddress *local;
   struct sockaddr static_sa, *sa = &static_sa;
-  ksocklen_t len = sizeof(static_sa);
+  kde_socklen_t len = sizeof(static_sa);
 
   /* find out the socket length, in advance
    * we use a sockaddr allocated on the heap just not to pass down
@@ -2096,7 +2096,7 @@
 {
   ::KSocketAddress *peer;
   struct sockaddr static_sa, *sa = &static_sa;
-  ksocklen_t len = sizeof(static_sa);
+  kde_socklen_t len = sizeof(static_sa);
 
   /* find out the socket length, in advance
    * we use a sockaddr allocated on the heap just not to pass down
--- kdelibs-3.4.0/kdecore/ksocks.cpp.ksocklen_t	2005-03-26 16:39:56.897690504 +0100
+++ kdelibs-3.4.0/kdecore/ksocks.cpp	2005-03-26 16:40:10.321706632 +0100
@@ -61,22 +61,22 @@
 extern "C" {
 // Function pointer table
 static int     (*F_SOCKSinit)   (char *) = 0L;
-static int     (*F_connect)     (int, const struct sockaddr *, ksocklen_t) = 0L;
+static int     (*F_connect)     (int, const struct sockaddr *, kde_socklen_t) = 0L;
 static signed long int (*F_read)        (int, void *, unsigned long int) = 0L;
 static signed long int (*F_write)       (int, const void *, unsigned long int) = 0L;
 static int     (*F_recvfrom)    (int, void *, unsigned long int, int, struct sockaddr *,
-                                 ksocklen_t *) = 0L;
+                                 kde_socklen_t *) = 0L;
 static int     (*F_sendto)      (int, const void *, unsigned long int, int,
-                                 const struct sockaddr *, ksocklen_t) = 0L;
+                                 const struct sockaddr *, kde_socklen_t) = 0L;
 static int     (*F_recv)        (int, void *, unsigned long int, int) = 0L;
 static int     (*F_send)        (int, const void *, unsigned long int, int) = 0L;
-static int     (*F_getsockname) (int, struct sockaddr *, ksocklen_t *) = 0L;
-static int     (*F_getpeername) (int, struct sockaddr *, ksocklen_t *) = 0L;
-static int     (*F_accept)      (int, struct sockaddr *, ksocklen_t *) = 0L;
+static int     (*F_getsockname) (int, struct sockaddr *, kde_socklen_t *) = 0L;
+static int     (*F_getpeername) (int, struct sockaddr *, kde_socklen_t *) = 0L;
+static int     (*F_accept)      (int, struct sockaddr *, kde_socklen_t *) = 0L;
 static int     (*F_select)      (int, fd_set *, fd_set *, fd_set *,
                                                      struct timeval *) = 0L;
 static int     (*F_listen)      (int, int) = 0L;
-static int     (*F_bind)        (int, const struct sockaddr *, ksocklen_t) = 0L;
+static int     (*F_bind)        (int, const struct sockaddr *, kde_socklen_t) = 0L;
 }
 
 
@@ -340,7 +340,7 @@
                          _socksLib->symbol(it.data().latin1());
           break;
          case S_connect:
-           F_connect = (int (*)(int, const struct sockaddr *, ksocklen_t))
+           F_connect = (int (*)(int, const struct sockaddr *, kde_socklen_t))
                        _socksLib->symbol(it.data().latin1());
           break;
          case S_read:
@@ -353,12 +353,12 @@
           break;
          case S_recvfrom:
            F_recvfrom = (int (*)(int, void *, unsigned long int, int,
-                                 struct sockaddr *, ksocklen_t *))
+                                 struct sockaddr *, kde_socklen_t *))
                         _socksLib->symbol(it.data().latin1());
           break;
          case S_sendto:
            F_sendto = (int (*)(int, const void *, unsigned long int, int,
-                               const struct sockaddr *, ksocklen_t))
+                               const struct sockaddr *, kde_socklen_t))
                       _socksLib->symbol(it.data().latin1());
           break;
          case S_recv:
@@ -370,15 +370,15 @@
                     _socksLib->symbol(it.data().latin1());
           break;
          case S_getsockname:
-           F_getsockname = (int (*)(int, struct sockaddr *, ksocklen_t *))
+           F_getsockname = (int (*)(int, struct sockaddr *, kde_socklen_t *))
                            _socksLib->symbol(it.data().latin1());
           break;
          case S_getpeername:
-           F_getpeername = (int (*)(int, struct sockaddr *, ksocklen_t *))
+           F_getpeername = (int (*)(int, struct sockaddr *, kde_socklen_t *))
                            _socksLib->symbol(it.data().latin1());
           break;
          case S_accept:
-           F_accept = (int (*)(int, struct sockaddr *, ksocklen_t *))
+           F_accept = (int (*)(int, struct sockaddr *, kde_socklen_t *))
                       _socksLib->symbol(it.data().latin1());
           break;
          case S_select:
@@ -390,7 +390,7 @@
                       _socksLib->symbol(it.data().latin1());
           break;
          case S_bind:
-           F_bind = (int (*)(int, const struct sockaddr *, ksocklen_t))
+           F_bind = (int (*)(int, const struct sockaddr *, kde_socklen_t))
                     _socksLib->symbol(it.data().latin1());
           break;
          default:
@@ -472,7 +472,7 @@
  */
 
 int KSocks::connect (int sockfd, const sockaddr *serv_addr,
-                                                   ksocklen_t addrlen) {
+                                                   kde_socklen_t addrlen) {
    if (_useSocks && F_connect)
       return (*F_connect)(sockfd, serv_addr, addrlen);
    else return ::connect(sockfd, (sockaddr*) serv_addr, (socklen_t)addrlen);
@@ -494,7 +494,7 @@
 
 
 int KSocks::recvfrom (int s, void *buf, unsigned long int len, int flags,
-                                sockaddr *from, ksocklen_t *fromlen) {
+                                sockaddr *from, kde_socklen_t *fromlen) {
    if (_useSocks && F_recvfrom) {
       return (*F_recvfrom)(s, buf, len, flags, from, fromlen);
    } else {
@@ -507,7 +507,7 @@
 
 
 int KSocks::sendto (int s, const void *msg, unsigned long int len, int flags,
-                             const sockaddr *to, ksocklen_t tolen) {
+                             const sockaddr *to, kde_socklen_t tolen) {
    if (_useSocks && F_sendto)
       return (*F_sendto)(s, msg, len, flags, to, tolen);
    else return ::sendto(s, (char*) msg, len, flags, to, (socklen_t)tolen);
@@ -528,7 +528,7 @@
 }
 
 
-int KSocks::getsockname (int s, sockaddr *name, ksocklen_t *namelen) {
+int KSocks::getsockname (int s, sockaddr *name, kde_socklen_t *namelen) {
    if (_useSocks && F_getsockname) {
       return (*F_getsockname)(s, name, namelen);
    } else {
@@ -540,7 +540,7 @@
 }
 
 
-int KSocks::getpeername (int s, sockaddr *name, ksocklen_t *namelen) {
+int KSocks::getpeername (int s, sockaddr *name, kde_socklen_t *namelen) {
    if (_useSocks && F_getpeername) {
       return (*F_getpeername)(s, name, namelen);
    } else {
@@ -552,7 +552,7 @@
 }
 
 
-int KSocks::accept (int s, sockaddr *addr, ksocklen_t *addrlen) {
+int KSocks::accept (int s, sockaddr *addr, kde_socklen_t *addrlen) {
    if (_useSocks && F_accept) {
      return (*F_accept)(s, addr, addrlen);
    } else {
@@ -579,13 +579,13 @@
 }
 
 
-int KSocks::bind (int sockfd, const sockaddr *my_addr, ksocklen_t addrlen) {
+int KSocks::bind (int sockfd, const sockaddr *my_addr, kde_socklen_t addrlen) {
    if (_useSocks && F_bind)
       return (*F_bind)(sockfd, my_addr, addrlen);
    else return ::bind(sockfd, my_addr, (socklen_t)addrlen);
 }
 
-int KSocks::bind (int sockfd, sockaddr *my_addr, ksocklen_t addrlen) {
+int KSocks::bind (int sockfd, sockaddr *my_addr, kde_socklen_t addrlen) {
    if (_useSocks && F_bind)
       return (*F_bind)(sockfd, my_addr, addrlen);
    else return ::bind(sockfd, my_addr, (socklen_t)addrlen);
--- kdelibs-3.4.0/kdecore/ksocks.h.ksocklen_t	2005-03-26 16:39:57.257664121 +0100
+++ kdelibs-3.4.0/kdecore/ksocks.h	2005-03-26 16:44:48.063350393 +0100
@@ -32,7 +32,7 @@
 class KConfigBase;
 struct sockaddr;
 
-typedef unsigned ksocklen_t;
+//typedef unsigned kde_socklen_t;
 
 
 /**
@@ -99,7 +99,7 @@
     * name. Read the appropriate man page.
     */
     int     connect     (int sockfd, const sockaddr *serv_addr, 
-                                ksocklen_t addrlen);
+                                kde_socklen_t addrlen);
    /**
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
@@ -115,13 +115,13 @@
     * name. Read the appropriate man page.
     */
     int     recvfrom    (int s, void *buf, unsigned long int len, int flags, 
-                                sockaddr *from, ksocklen_t *fromlen);
+                                sockaddr *from, kde_socklen_t *fromlen);
    /**
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
     */
     int     sendto      (int s, const void *msg, unsigned long int len, int flags,
-                             const sockaddr *to, ksocklen_t tolen);
+                             const sockaddr *to, kde_socklen_t tolen);
    /**
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
@@ -136,17 +136,17 @@
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
     */
-    int     getsockname (int s, sockaddr *name, ksocklen_t *namelen);
+    int     getsockname (int s, sockaddr *name, kde_socklen_t *namelen);
    /**
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
     */
-    int     getpeername (int s, sockaddr *name, ksocklen_t *namelen);
+    int     getpeername (int s, sockaddr *name, kde_socklen_t *namelen);
    /**
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
     */
-    int     accept      (int s, sockaddr *addr, ksocklen_t *addrlen);
+    int     accept      (int s, sockaddr *addr, kde_socklen_t *addrlen);
    /**
     * This is the re-implementation of libc's function of the same
     * name. Read the appropriate man page.
@@ -164,9 +164,9 @@
     * name. Read the appropriate man page.
     */
     int     bind        (int sockfd, sockaddr *my_addr, 
-                                     ksocklen_t addrlen);
+                                     kde_socklen_t addrlen);
     int     bind        (int sockfd, const sockaddr *my_addr, 
-                                     ksocklen_t addrlen);
+                                     kde_socklen_t addrlen);
 
     /**
     *  If you're using this, you're probably doing something wrong.
--- kdelibs-3.4.0/kdecore/netsupp.cpp.ksocklen_t	2005-03-26 16:39:57.617637738 +0100
+++ kdelibs-3.4.0/kdecore/netsupp.cpp	2005-03-26 16:58:48.139779518 +0100
@@ -38,6 +38,7 @@
 #include "config.h"
 #include "kdebug.h"
 #include "klocale.h"
+#include "ksocks.h"
 
 #ifndef IN6_IS_ADDR_V4MAPPED
 #define NEED_IN6_TESTS
@@ -932,7 +933,7 @@
   snprintf(serv, servlen, "%u", ntohs(port));
 }
 
-int getnameinfo(const struct sockaddr *sa, ksocklen_t salen,
+int getnameinfo(const struct sockaddr *sa, kde_socklen_t salen,
 		char *host, size_t hostlen, char *serv, size_t servlen,
 		int flags)
 {
--- kdelibs-3.4.0/kdecore/ksockaddr.h.ksocklen_t	2005-03-26 16:39:56.147745469 +0100
+++ kdelibs-3.4.0/kdecore/ksockaddr.h	2005-03-26 16:53:31.225006833 +0100
@@ -20,6 +20,8 @@
 #ifndef KSOCKADDR_H
 #define KSOCKADDR_H
 
+#include <config.h>
+
 #include <qobject.h>
 #include <qcstring.h>
 #include <qstring.h>
@@ -28,7 +30,7 @@
 /*
  * This file defines a class that envelopes most, if not all, socket addresses
  */
-typedef unsigned ksocklen_t;
+//typedef unsigned kde_socklen_t;
 
 struct sockaddr;
 
@@ -57,7 +59,7 @@
    * @param sa a sockaddr structure
    * @param size the size of @p sa
    */
-  KSocketAddress(const sockaddr* sa, ksocklen_t size);
+  KSocketAddress(const sockaddr* sa, kde_socklen_t size);
 
 public:
   /**
@@ -82,7 +84,7 @@
    * Returns sockaddr structure size.
    * @return the size of the sockaddr structre, 0 if there is none.
    */
-  virtual ksocklen_t size() const
+  virtual kde_socklen_t size() const
   { return datasize; }
 
   /**
@@ -168,7 +170,7 @@
 
 protected:
   sockaddr*	data;
-  ksocklen_t	datasize;
+  kde_socklen_t	datasize;
   bool		owndata;
 
 private:
@@ -185,7 +187,7 @@
    * @param size	new socket address's length
    * @return the new KSocketAddress, or 0 if the function failed
    */
-  static KSocketAddress* newAddress(const struct sockaddr *sa, ksocklen_t size);
+  static KSocketAddress* newAddress(const struct sockaddr *sa, kde_socklen_t size);
 
   /**
    * Returns the IANA family number of the given address family.
@@ -249,14 +251,14 @@
    * @param sin		a sockaddr_in structure to copy from
    * @param len		the socket address length
    */
-  KInetSocketAddress(const sockaddr_in* sin, ksocklen_t len);
+  KInetSocketAddress(const sockaddr_in* sin, kde_socklen_t len);
 
   /**
    * Creates an IPv6 socket from raw sockaddr_in6.
    * @param sin6       	a sockaddr_in6 structure to copy from
    * @param len		the socket address length
    */
-  KInetSocketAddress(const sockaddr_in6* sin6, ksocklen_t len);
+  KInetSocketAddress(const sockaddr_in6* sin6, kde_socklen_t len);
 
   /**
    * Creates a socket from information.
@@ -301,7 +303,7 @@
    * @param len		the socket address length
    * @return true if successful, false otherwise
    */
-  bool setAddress(const sockaddr_in* sin, ksocklen_t len);
+  bool setAddress(const sockaddr_in* sin, kde_socklen_t len);
 
   /**
    * Sets this socket to given raw socket.
@@ -311,7 +313,7 @@
    * @param len		the socket address length
    * @return true if successful, false otherwise
    */
-  bool setAddress(const sockaddr_in6* sin6, ksocklen_t len);
+  bool setAddress(const sockaddr_in6* sin6, kde_socklen_t len);
 
   /**
    * Sets this socket to raw address and port.
@@ -474,7 +476,7 @@
    * Will be either sizeof(sockaddr_in) or sizeof(sockaddr_in6)
    * @return the length of the socket
    */
-  virtual ksocklen_t size() const; // should be socklen_t
+  virtual kde_socklen_t size() const; // should be socklen_t
 
   /* comparation */
   /**
@@ -595,7 +597,7 @@
    * @param raw_data	raw data
    * @param size	data length
    */
-  KUnixSocketAddress(const sockaddr_un* raw_data, ksocklen_t size);
+  KUnixSocketAddress(const sockaddr_un* raw_data, kde_socklen_t size);
 
   /**
    * Constructor from pathname.
@@ -614,7 +616,7 @@
    * @param size	the socket length
    * @return true if successful, false otherwise
    */
-  bool setAddress(const sockaddr_un* socket_address, ksocklen_t size);
+  bool setAddress(const sockaddr_un* socket_address, kde_socklen_t size);
 
   /**
    * Sets this to given pathname.
--- kdelibs-3.4.0/kdecore/ksock.cpp.ksocklen_t	2005-03-26 16:39:56.517718353 +0100
+++ kdelibs-3.4.0/kdecore/ksock.cpp	2005-03-26 16:40:10.310707438 +0100
@@ -102,7 +102,7 @@
   : sock(_sock), d(new KSocketPrivate)
 {
   struct sockaddr_in sin;
-  ksocklen_t len = sizeof(sin);
+  kde_socklen_t len = sizeof(sin);
 
   memset(&sin, 0, len);
 
--- kdelibs-3.4.0/kdecore/ksockaddr.cpp.ksocklen_t	2005-03-26 16:39:55.737775517 +0100
+++ kdelibs-3.4.0/kdecore/ksockaddr.cpp	2005-03-26 16:40:10.291708830 +0100
@@ -80,7 +80,7 @@
  * Class KSocketAddress
  */
 
-KSocketAddress::KSocketAddress(const sockaddr* sa, ksocklen_t size)
+KSocketAddress::KSocketAddress(const sockaddr* sa, kde_socklen_t size)
 {
     if ( !sa )
         init();
@@ -120,7 +120,7 @@
 }
 
 // This creates a new KSocketAddress with given sockaddr
-KSocketAddress* KSocketAddress::newAddress(const struct sockaddr* sa, ksocklen_t size)
+KSocketAddress* KSocketAddress::newAddress(const struct sockaddr* sa, kde_socklen_t size)
 {
   if (size == 0)
     {
@@ -279,13 +279,13 @@
   setAddress(other);
 }
 
-KInetSocketAddress::KInetSocketAddress(const sockaddr_in* sin, ksocklen_t len) :
+KInetSocketAddress::KInetSocketAddress(const sockaddr_in* sin, kde_socklen_t len) :
   d(new KInetSocketAddressPrivate)
 {
   setAddress(sin, len);
 }
 
-KInetSocketAddress::KInetSocketAddress(const sockaddr_in6* sin6, ksocklen_t len) :
+KInetSocketAddress::KInetSocketAddress(const sockaddr_in6* sin6, kde_socklen_t len) :
   d(new KInetSocketAddressPrivate)
 {
   setAddress(sin6, len);
@@ -327,7 +327,7 @@
   return false;
 }
 
-bool KInetSocketAddress::setAddress(const sockaddr_in* sin, ksocklen_t len)
+bool KInetSocketAddress::setAddress(const sockaddr_in* sin, kde_socklen_t len)
 {
   // This is supposed to be a AF_INET socket
   if ((len < sizeof(sockaddr_in)) || (sin->sin_family != AF_INET))
@@ -339,7 +339,7 @@
   return setHost(sin->sin_addr) && setPort(ntohs(sin->sin_port));
 }
 
-bool KInetSocketAddress::setAddress(const sockaddr_in6* sin6, ksocklen_t len)
+bool KInetSocketAddress::setAddress(const sockaddr_in6* sin6, kde_socklen_t len)
 {
 #ifdef AF_INET6
   // should be family AF_INET6
@@ -614,7 +614,7 @@
   return 0;
 }
 
-ksocklen_t KInetSocketAddress::size() const
+kde_socklen_t KInetSocketAddress::size() const
 {
   if (d->sockfamily == AF_INET)
     return sizeof(d->sin);
@@ -743,7 +743,7 @@
 {
 }
 
-KUnixSocketAddress::KUnixSocketAddress(const sockaddr_un* _sun, ksocklen_t size) :
+KUnixSocketAddress::KUnixSocketAddress(const sockaddr_un* _sun, kde_socklen_t size) :
   d(new KUnixSocketAddressPrivate)
 {
   setAddress(_sun, size);
@@ -760,7 +760,7 @@
   delete d;
 }
 
-bool KUnixSocketAddress::setAddress(const sockaddr_un* _sun, ksocklen_t _size)
+bool KUnixSocketAddress::setAddress(const sockaddr_un* _sun, kde_socklen_t _size)
 {
   if (_sun->sun_family != AF_UNIX)
     {
@@ -802,7 +802,7 @@
 bool KUnixSocketAddress::setAddress(QCString path)
 {
   // the +1 is necessary for the ending zero
-  ksocklen_t newsize = offsetof(sockaddr_un, sun_path) + path.length() + 1;
+  kde_socklen_t newsize = offsetof(sockaddr_un, sun_path) + path.length() + 1;
 
   if (owndata && (d->m_sun != NULL) && (datasize >= newsize))
     {
--- kdelibs-3.4.0/kioslave/ftp/ftp.cc.ksocklen_t	2005-03-26 16:40:21.067919020 +0100
+++ kdelibs-3.4.0/kioslave/ftp/ftp.cc	2005-03-26 16:40:22.886785712 +0100
@@ -1110,7 +1110,7 @@
       break;
   }
 
-  ksocklen_t l = sizeof(addr);
+  kde_socklen_t l = sizeof(addr);
   m_data->setServer( KSocks::self()->accept(sSock, &addr, &l) );
   return (m_data->server() != -1);
 }
